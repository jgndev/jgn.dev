name: Deploy to GCP Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GCP_REGION }}
  SERVICE: jgn-dev
  REGION: ${{ secrets.GCP_REGION }}

jobs:
  # Test and build job
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Go dependencies
      run: go mod download

    - name: Install templ CLI
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Install Node.js dependencies
      run: npm ci

    - name: Generate templ files
      run: templ generate

    - name: Build CSS
      run: npx tailwindcss -i ./public/css/style.css -o ./public/css/site.css --minify

    - name: Run Go tests
      run: go test -v ./...

    - name: Run Go vet
      run: go vet ./...

    - name: Run Go format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Build application
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
          -ldflags='-w -s -extldflags "-static"' \
          -a -installsuffix cgo \
          -o jgn-dev-server ./server

  # Security scanning
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy job (only on main branch)
  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        # Build the image
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jgn-dev-repo/${{ env.SERVICE }}:${{ github.sha }} \
                     -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jgn-dev-repo/${{ env.SERVICE }}:latest .
        
        # Push both tags
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jgn-dev-repo/${{ env.SERVICE }}:${{ github.sha }}
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jgn-dev-repo/${{ env.SERVICE }}:latest

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/jgn-dev-repo/${{ env.SERVICE }}:${{ github.sha }}
        env_vars: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN_FOR_API }}
          GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET }}
          PORT=8080
          GIN_MODE=release

    - name: Show deployment result
      run: echo ${{ steps.deploy.outputs.url }}

    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const description = state === 'success' 
            ? 'Deployment to Cloud Run succeeded'
            : 'Deployment to Cloud Run failed';
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            description: description,
            context: 'deploy/cloud-run'
          });

  # Post-deployment tests
  smoke-test:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Test deployment health
      run: |
        # Wait a moment for deployment to stabilize
        sleep 30
        
        # Get the service URL (you might need to adjust this based on your setup)
        SERVICE_URL="${{ needs.deploy.outputs.url || format('https://jgn-dev-{0}.a.run.app', secrets.GCP_REGION) }}"
        
        echo "Testing deployment at: $SERVICE_URL"
        
        # Test health endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/")
        if [ "$response" != "200" ]; then
          echo "Health check failed with status: $response"
          exit 1
        fi
        
        echo "Deployment health check passed!"

    - name: Notify on success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            description: 'Post-deployment tests passed',
            context: 'test/smoke'
          });

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'failure',
            description: 'Post-deployment tests failed',
            context: 'test/smoke'
          }); 